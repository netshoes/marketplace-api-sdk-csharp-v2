/* 
 * API Marketplace Grupo Netshoes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get product by sku
        /// </summary>
        /// <remarks>
        /// Returns the product associated with the searched sku.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>InlineResponse200Items</returns>
        InlineResponse200Items GetProductBySku (string clientId, string accessToken, string sku, string expands = null);

        /// <summary>
        /// Get product by sku
        /// </summary>
        /// <remarks>
        /// Returns the product associated with the searched sku.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200Items</returns>
        ApiResponse<InlineResponse200Items> GetProductBySkuWithHttpInfo (string clientId, string accessToken, string sku, string expands = null);
        /// <summary>
        /// Get list of products
        /// </summary>
        /// <remarks>
        /// Returns all products associated to the seller.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="page">Number of the page in pagination. The starting page number is zero. (optional, default to 0)</param>
        /// <param name="size">Define the size of the returned list of products. (optional, default to 20)</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetProducts (string clientId, string accessToken, int? page = null, int? size = null, string expands = null);

        /// <summary>
        /// Get list of products
        /// </summary>
        /// <remarks>
        /// Returns all products associated to the seller.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="page">Number of the page in pagination. The starting page number is zero. (optional, default to 0)</param>
        /// <param name="size">Define the size of the returned list of products. (optional, default to 20)</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetProductsWithHttpInfo (string clientId, string accessToken, int? page = null, int? size = null, string expands = null);
        /// <summary>
        /// Get product status
        /// </summary>
        /// <remarks>
        /// Returns the current status of a product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetStatusProductBySku (string clientId, string accessToken, string sku);

        /// <summary>
        /// Get product status
        /// </summary>
        /// <remarks>
        /// Returns the current status of a product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetStatusProductBySkuWithHttpInfo (string clientId, string accessToken, string sku);
        /// <summary>
        /// Create a new product.
        /// </summary>
        /// <remarks>
        /// Creates a new product. Cannot set flavor and color on the same product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns></returns>
        void SaveProduct (string clientId, string accessToken, Body body);

        /// <summary>
        /// Create a new product.
        /// </summary>
        /// <remarks>
        /// Creates a new product. Cannot set flavor and color on the same product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveProductWithHttpInfo (string clientId, string accessToken, Body body);
        /// <summary>
        /// Update a product.
        /// </summary>
        /// <remarks>
        /// Updates a product. Cannot set flavor and color on the same product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns></returns>
        void UpdateProduct (string clientId, string accessToken, string sku, Body1 body);

        /// <summary>
        /// Update a product.
        /// </summary>
        /// <remarks>
        /// Updates a product. Cannot set flavor and color on the same product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProductWithHttpInfo (string clientId, string accessToken, string sku, Body1 body);
        /// <summary>
        /// Update product status. Only sandbox
        /// </summary>
        /// <remarks>
        /// Update product status for Sandbox operations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to update status.</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 UpdateProductStatusBySku (string clientId, string accessToken, string sku, Body2 body);

        /// <summary>
        /// Update product status. Only sandbox
        /// </summary>
        /// <remarks>
        /// Update product status for Sandbox operations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to update status.</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> UpdateProductStatusBySkuWithHttpInfo (string clientId, string accessToken, string sku, Body2 body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get product by sku
        /// </summary>
        /// <remarks>
        /// Returns the product associated with the searched sku.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>Task of InlineResponse200Items</returns>
        System.Threading.Tasks.Task<InlineResponse200Items> GetProductBySkuAsync (string clientId, string accessToken, string sku, string expands = null);

        /// <summary>
        /// Get product by sku
        /// </summary>
        /// <remarks>
        /// Returns the product associated with the searched sku.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200Items>> GetProductBySkuAsyncWithHttpInfo (string clientId, string accessToken, string sku, string expands = null);
        /// <summary>
        /// Get list of products
        /// </summary>
        /// <remarks>
        /// Returns all products associated to the seller.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="page">Number of the page in pagination. The starting page number is zero. (optional, default to 0)</param>
        /// <param name="size">Define the size of the returned list of products. (optional, default to 20)</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetProductsAsync (string clientId, string accessToken, int? page = null, int? size = null, string expands = null);

        /// <summary>
        /// Get list of products
        /// </summary>
        /// <remarks>
        /// Returns all products associated to the seller.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="page">Number of the page in pagination. The starting page number is zero. (optional, default to 0)</param>
        /// <param name="size">Define the size of the returned list of products. (optional, default to 20)</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetProductsAsyncWithHttpInfo (string clientId, string accessToken, int? page = null, int? size = null, string expands = null);
        /// <summary>
        /// Get product status
        /// </summary>
        /// <remarks>
        /// Returns the current status of a product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetStatusProductBySkuAsync (string clientId, string accessToken, string sku);

        /// <summary>
        /// Get product status
        /// </summary>
        /// <remarks>
        /// Returns the current status of a product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetStatusProductBySkuAsyncWithHttpInfo (string clientId, string accessToken, string sku);
        /// <summary>
        /// Create a new product.
        /// </summary>
        /// <remarks>
        /// Creates a new product. Cannot set flavor and color on the same product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveProductAsync (string clientId, string accessToken, Body body);

        /// <summary>
        /// Create a new product.
        /// </summary>
        /// <remarks>
        /// Creates a new product. Cannot set flavor and color on the same product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveProductAsyncWithHttpInfo (string clientId, string accessToken, Body body);
        /// <summary>
        /// Update a product.
        /// </summary>
        /// <remarks>
        /// Updates a product. Cannot set flavor and color on the same product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProductAsync (string clientId, string accessToken, string sku, Body1 body);

        /// <summary>
        /// Update a product.
        /// </summary>
        /// <remarks>
        /// Updates a product. Cannot set flavor and color on the same product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProductAsyncWithHttpInfo (string clientId, string accessToken, string sku, Body1 body);
        /// <summary>
        /// Update product status. Only sandbox
        /// </summary>
        /// <remarks>
        /// Update product status for Sandbox operations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to update status.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> UpdateProductStatusBySkuAsync (string clientId, string accessToken, string sku, Body2 body);

        /// <summary>
        /// Update product status. Only sandbox
        /// </summary>
        /// <remarks>
        /// Update product status for Sandbox operations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to update status.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> UpdateProductStatusBySkuAsyncWithHttpInfo (string clientId, string accessToken, string sku, Body2 body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductsApi : IProductsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get product by sku Returns the product associated with the searched sku.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>InlineResponse200Items</returns>
        public InlineResponse200Items GetProductBySku (string clientId, string accessToken, string sku, string expands = null)
        {
             ApiResponse<InlineResponse200Items> localVarResponse = GetProductBySkuWithHttpInfo(clientId, accessToken, sku, expands);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get product by sku Returns the product associated with the searched sku.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200Items</returns>
        public ApiResponse< InlineResponse200Items > GetProductBySkuWithHttpInfo (string clientId, string accessToken, string sku, string expands = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->GetProductBySku");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProductsApi->GetProductBySku");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->GetProductBySku");

            var localVarPath = "/products/{sku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (expands != null) localVarQueryParams.Add("expands", Configuration.ApiClient.ParameterToString(expands)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductBySku", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200Items>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200Items) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200Items)));
            
        }

        /// <summary>
        /// Get product by sku Returns the product associated with the searched sku.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>Task of InlineResponse200Items</returns>
        public async System.Threading.Tasks.Task<InlineResponse200Items> GetProductBySkuAsync (string clientId, string accessToken, string sku, string expands = null)
        {
             ApiResponse<InlineResponse200Items> localVarResponse = await GetProductBySkuAsyncWithHttpInfo(clientId, accessToken, sku, expands);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get product by sku Returns the product associated with the searched sku.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200Items)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200Items>> GetProductBySkuAsyncWithHttpInfo (string clientId, string accessToken, string sku, string expands = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->GetProductBySku");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProductsApi->GetProductBySku");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->GetProductBySku");

            var localVarPath = "/products/{sku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (expands != null) localVarQueryParams.Add("expands", Configuration.ApiClient.ParameterToString(expands)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductBySku", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200Items>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200Items) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200Items)));
            
        }

        /// <summary>
        /// Get list of products Returns all products associated to the seller.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="page">Number of the page in pagination. The starting page number is zero. (optional, default to 0)</param>
        /// <param name="size">Define the size of the returned list of products. (optional, default to 20)</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetProducts (string clientId, string accessToken, int? page = null, int? size = null, string expands = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = GetProductsWithHttpInfo(clientId, accessToken, page, size, expands);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of products Returns all products associated to the seller.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="page">Number of the page in pagination. The starting page number is zero. (optional, default to 0)</param>
        /// <param name="size">Define the size of the returned list of products. (optional, default to 20)</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > GetProductsWithHttpInfo (string clientId, string accessToken, int? page = null, int? size = null, string expands = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->GetProducts");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProductsApi->GetProducts");

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (expands != null) localVarQueryParams.Add("expands", Configuration.ApiClient.ParameterToString(expands)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Get list of products Returns all products associated to the seller.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="page">Number of the page in pagination. The starting page number is zero. (optional, default to 0)</param>
        /// <param name="size">Define the size of the returned list of products. (optional, default to 20)</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetProductsAsync (string clientId, string accessToken, int? page = null, int? size = null, string expands = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetProductsAsyncWithHttpInfo(clientId, accessToken, page, size, expands);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of products Returns all products associated to the seller.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="page">Number of the page in pagination. The starting page number is zero. (optional, default to 0)</param>
        /// <param name="size">Define the size of the returned list of products. (optional, default to 20)</param>
        /// <param name="expands">Expand response relationships, for instance if you need to access product images use &#39;images&#39;, to access product attributes use &#39;attributes&#39; and to access images and attributes use &#39;images,attributes&#39;. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetProductsAsyncWithHttpInfo (string clientId, string accessToken, int? page = null, int? size = null, string expands = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->GetProducts");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProductsApi->GetProducts");

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (expands != null) localVarQueryParams.Add("expands", Configuration.ApiClient.ParameterToString(expands)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Get product status Returns the current status of a product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetStatusProductBySku (string clientId, string accessToken, string sku)
        {
             ApiResponse<InlineResponse2001> localVarResponse = GetStatusProductBySkuWithHttpInfo(clientId, accessToken, sku);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get product status Returns the current status of a product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > GetStatusProductBySkuWithHttpInfo (string clientId, string accessToken, string sku)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->GetStatusProductBySku");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProductsApi->GetStatusProductBySku");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->GetStatusProductBySku");

            var localVarPath = "/products/{sku}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusProductBySku", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Get product status Returns the current status of a product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetStatusProductBySkuAsync (string clientId, string accessToken, string sku)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await GetStatusProductBySkuAsyncWithHttpInfo(clientId, accessToken, sku);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get product status Returns the current status of a product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetStatusProductBySkuAsyncWithHttpInfo (string clientId, string accessToken, string sku)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->GetStatusProductBySku");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProductsApi->GetStatusProductBySku");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->GetStatusProductBySku");

            var localVarPath = "/products/{sku}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusProductBySku", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Create a new product. Creates a new product. Cannot set flavor and color on the same product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns></returns>
        public void SaveProduct (string clientId, string accessToken, Body body)
        {
             SaveProductWithHttpInfo(clientId, accessToken, body);
        }

        /// <summary>
        /// Create a new product. Creates a new product. Cannot set flavor and color on the same product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SaveProductWithHttpInfo (string clientId, string accessToken, Body body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->SaveProduct");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProductsApi->SaveProduct");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->SaveProduct");

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new product. Creates a new product. Cannot set flavor and color on the same product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveProductAsync (string clientId, string accessToken, Body body)
        {
             await SaveProductAsyncWithHttpInfo(clientId, accessToken, body);

        }

        /// <summary>
        /// Create a new product. Creates a new product. Cannot set flavor and color on the same product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SaveProductAsyncWithHttpInfo (string clientId, string accessToken, Body body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->SaveProduct");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProductsApi->SaveProduct");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->SaveProduct");

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a product. Updates a product. Cannot set flavor and color on the same product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns></returns>
        public void UpdateProduct (string clientId, string accessToken, string sku, Body1 body)
        {
             UpdateProductWithHttpInfo(clientId, accessToken, sku, body);
        }

        /// <summary>
        /// Update a product. Updates a product. Cannot set flavor and color on the same product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProductWithHttpInfo (string clientId, string accessToken, string sku, Body1 body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->UpdateProduct");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProductsApi->UpdateProduct");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->UpdateProduct");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->UpdateProduct");

            var localVarPath = "/products/{sku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a product. Updates a product. Cannot set flavor and color on the same product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProductAsync (string clientId, string accessToken, string sku, Body1 body)
        {
             await UpdateProductAsyncWithHttpInfo(clientId, accessToken, sku, body);

        }

        /// <summary>
        /// Update a product. Updates a product. Cannot set flavor and color on the same product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Product json to create a new product.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProductAsyncWithHttpInfo (string clientId, string accessToken, string sku, Body1 body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->UpdateProduct");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProductsApi->UpdateProduct");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->UpdateProduct");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->UpdateProduct");

            var localVarPath = "/products/{sku}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update product status. Only sandbox Update product status for Sandbox operations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to update status.</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 UpdateProductStatusBySku (string clientId, string accessToken, string sku, Body2 body)
        {
             ApiResponse<InlineResponse2001> localVarResponse = UpdateProductStatusBySkuWithHttpInfo(clientId, accessToken, sku, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update product status. Only sandbox Update product status for Sandbox operations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to update status.</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > UpdateProductStatusBySkuWithHttpInfo (string clientId, string accessToken, string sku, Body2 body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->UpdateProductStatusBySku");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProductsApi->UpdateProductStatusBySku");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->UpdateProductStatusBySku");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->UpdateProductStatusBySku");

            var localVarPath = "/products/{sku}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProductStatusBySku", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Update product status. Only sandbox Update product status for Sandbox operations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to update status.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> UpdateProductStatusBySkuAsync (string clientId, string accessToken, string sku, Body2 body)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await UpdateProductStatusBySkuAsyncWithHttpInfo(clientId, accessToken, sku, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update product status. Only sandbox Update product status for Sandbox operations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to update status.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> UpdateProductStatusBySkuAsyncWithHttpInfo (string clientId, string accessToken, string sku, Body2 body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->UpdateProductStatusBySku");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ProductsApi->UpdateProductStatusBySku");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling ProductsApi->UpdateProductStatusBySku");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->UpdateProductStatusBySku");

            var localVarPath = "/products/{sku}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProductStatusBySku", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

    }
}
