/* 
 * API Marketplace Grupo Netshoes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStocksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get stock of the product
        /// </summary>
        /// <remarks>
        /// Returns the current stock quantity of the product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetStockProductBySku (string clientId, string accessToken, string sku);

        /// <summary>
        /// Get stock of the product
        /// </summary>
        /// <remarks>
        /// Returns the current stock quantity of the product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetStockProductBySkuWithHttpInfo (string clientId, string accessToken, string sku);
        /// <summary>
        /// Save a newly created stock quantity of the product
        /// </summary>
        /// <remarks>
        /// Saves a new stock quantity of a product with no previous stock set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns></returns>
        void SaveStockProductBySku (string clientId, string accessToken, string sku, Body6 body);

        /// <summary>
        /// Save a newly created stock quantity of the product
        /// </summary>
        /// <remarks>
        /// Saves a new stock quantity of a product with no previous stock set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveStockProductBySkuWithHttpInfo (string clientId, string accessToken, string sku, Body6 body);
        /// <summary>
        /// Update stock of the product
        /// </summary>
        /// <remarks>
        /// Updates the stock quantity of the product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns></returns>
        void UpdateStockProductBySku (string clientId, string accessToken, string sku, Body5 body);

        /// <summary>
        /// Update stock of the product
        /// </summary>
        /// <remarks>
        /// Updates the stock quantity of the product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateStockProductBySkuWithHttpInfo (string clientId, string accessToken, string sku, Body5 body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get stock of the product
        /// </summary>
        /// <remarks>
        /// Returns the current stock quantity of the product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetStockProductBySkuAsync (string clientId, string accessToken, string sku);

        /// <summary>
        /// Get stock of the product
        /// </summary>
        /// <remarks>
        /// Returns the current stock quantity of the product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetStockProductBySkuAsyncWithHttpInfo (string clientId, string accessToken, string sku);
        /// <summary>
        /// Save a newly created stock quantity of the product
        /// </summary>
        /// <remarks>
        /// Saves a new stock quantity of a product with no previous stock set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveStockProductBySkuAsync (string clientId, string accessToken, string sku, Body6 body);

        /// <summary>
        /// Save a newly created stock quantity of the product
        /// </summary>
        /// <remarks>
        /// Saves a new stock quantity of a product with no previous stock set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveStockProductBySkuAsyncWithHttpInfo (string clientId, string accessToken, string sku, Body6 body);
        /// <summary>
        /// Update stock of the product
        /// </summary>
        /// <remarks>
        /// Updates the stock quantity of the product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateStockProductBySkuAsync (string clientId, string accessToken, string sku, Body5 body);

        /// <summary>
        /// Update stock of the product
        /// </summary>
        /// <remarks>
        /// Updates the stock quantity of the product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateStockProductBySkuAsyncWithHttpInfo (string clientId, string accessToken, string sku, Body5 body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StocksApi : IStocksApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StocksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StocksApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StocksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StocksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get stock of the product Returns the current stock quantity of the product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetStockProductBySku (string clientId, string accessToken, string sku)
        {
             ApiResponse<InlineResponse2003> localVarResponse = GetStockProductBySkuWithHttpInfo(clientId, accessToken, sku);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get stock of the product Returns the current stock quantity of the product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > GetStockProductBySkuWithHttpInfo (string clientId, string accessToken, string sku)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling StocksApi->GetStockProductBySku");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling StocksApi->GetStockProductBySku");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling StocksApi->GetStockProductBySku");

            var localVarPath = "/products/{sku}/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStockProductBySku", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Get stock of the product Returns the current stock quantity of the product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetStockProductBySkuAsync (string clientId, string accessToken, string sku)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await GetStockProductBySkuAsyncWithHttpInfo(clientId, accessToken, sku);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get stock of the product Returns the current stock quantity of the product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetStockProductBySkuAsyncWithHttpInfo (string clientId, string accessToken, string sku)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling StocksApi->GetStockProductBySku");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling StocksApi->GetStockProductBySku");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling StocksApi->GetStockProductBySku");

            var localVarPath = "/products/{sku}/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStockProductBySku", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Save a newly created stock quantity of the product Saves a new stock quantity of a product with no previous stock set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns></returns>
        public void SaveStockProductBySku (string clientId, string accessToken, string sku, Body6 body)
        {
             SaveStockProductBySkuWithHttpInfo(clientId, accessToken, sku, body);
        }

        /// <summary>
        /// Save a newly created stock quantity of the product Saves a new stock quantity of a product with no previous stock set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SaveStockProductBySkuWithHttpInfo (string clientId, string accessToken, string sku, Body6 body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling StocksApi->SaveStockProductBySku");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling StocksApi->SaveStockProductBySku");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling StocksApi->SaveStockProductBySku");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StocksApi->SaveStockProductBySku");

            var localVarPath = "/products/{sku}/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveStockProductBySku", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Save a newly created stock quantity of the product Saves a new stock quantity of a product with no previous stock set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveStockProductBySkuAsync (string clientId, string accessToken, string sku, Body6 body)
        {
             await SaveStockProductBySkuAsyncWithHttpInfo(clientId, accessToken, sku, body);

        }

        /// <summary>
        /// Save a newly created stock quantity of the product Saves a new stock quantity of a product with no previous stock set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SaveStockProductBySkuAsyncWithHttpInfo (string clientId, string accessToken, string sku, Body6 body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling StocksApi->SaveStockProductBySku");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling StocksApi->SaveStockProductBySku");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling StocksApi->SaveStockProductBySku");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StocksApi->SaveStockProductBySku");

            var localVarPath = "/products/{sku}/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveStockProductBySku", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update stock of the product Updates the stock quantity of the product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns></returns>
        public void UpdateStockProductBySku (string clientId, string accessToken, string sku, Body5 body)
        {
             UpdateStockProductBySkuWithHttpInfo(clientId, accessToken, sku, body);
        }

        /// <summary>
        /// Update stock of the product Updates the stock quantity of the product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateStockProductBySkuWithHttpInfo (string clientId, string accessToken, string sku, Body5 body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling StocksApi->UpdateStockProductBySku");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling StocksApi->UpdateStockProductBySku");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling StocksApi->UpdateStockProductBySku");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StocksApi->UpdateStockProductBySku");

            var localVarPath = "/products/{sku}/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStockProductBySku", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update stock of the product Updates the stock quantity of the product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateStockProductBySkuAsync (string clientId, string accessToken, string sku, Body5 body)
        {
             await UpdateStockProductBySkuAsyncWithHttpInfo(clientId, accessToken, sku, body);

        }

        /// <summary>
        /// Update stock of the product Updates the stock quantity of the product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The APP Token used to authenticate.</param>
        /// <param name="accessToken">The Access Token used to authenticate.</param>
        /// <param name="sku">Product&#39;s Sku</param>
        /// <param name="body">Json to send a stock quantity.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateStockProductBySkuAsyncWithHttpInfo (string clientId, string accessToken, string sku, Body5 body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling StocksApi->UpdateStockProductBySku");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling StocksApi->UpdateStockProductBySku");
            // verify the required parameter 'sku' is set
            if (sku == null)
                throw new ApiException(400, "Missing required parameter 'sku' when calling StocksApi->UpdateStockProductBySku");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StocksApi->UpdateStockProductBySku");

            var localVarPath = "/products/{sku}/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sku != null) localVarPathParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStockProductBySku", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
